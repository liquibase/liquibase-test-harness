USE ROLE LIQUIBASE_TEST_HARNESS_ROLE
DROP SCHEMA IF EXISTS TESTHARNESS CASCADE
CREATE SCHEMA TESTHARNESS
USE SCHEMA TESTHARNESS
GRANT ALL PRIVILEGES ON SCHEMA TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE
CREATE TABLE DATABASECHANGELOG (
ID VARCHAR(255) NOT NULL,
AUTHOR VARCHAR(255) NOT NULL,
FILENAME VARCHAR(255) NOT NULL,
DATEEXECUTED TIMESTAMP NOT NULL,
ORDEREXECUTED INT NOT NULL,
EXECTYPE VARCHAR(10) NOT NULL,
MD5SUM VARCHAR(35),
DESCRIPTION VARCHAR(255),
COMMENTS VARCHAR(255),
TAG VARCHAR(255),
LIQUIBASE VARCHAR(20),
CONTEXTS VARCHAR(255),
LABELS VARCHAR(255),
DEPLOYMENT_ID VARCHAR(10)
)
CREATE TABLE DATABASECHANGELOGLOCK (
ID INT NOT NULL,
LOCKED BOOLEAN NOT NULL,
LOCKGRANTED TIMESTAMP,
LOCKEDBY VARCHAR(255),
PRIMARY KEY (ID)
)
INSERT INTO DATABASECHANGELOGLOCK (ID, LOCKED) VALUES (1, TRUE)
CREATE TRANSIENT TABLE LTHDB.TESTHARNESS.TEST_TRANSIENT_TABLE (id INT NOT NULL, name VARCHAR(100), created_date timestamp DEFAULT current_timestamp::timestamp_ntz, CONSTRAINT PK_TEST_TRANSIENT_TABLE PRIMARY KEY (id)) COMMENT = 'Transient test table'
COMMENT ON TABLE LTHDB.TESTHARNESS.TEST_TRANSIENT_TABLE IS 'COMMENT:Transient test table'
CREATE TABLE LTHDB.TESTHARNESS.TEST_CLUSTERED_TABLE (id INT, category VARCHAR(50), subcategory VARCHAR(50), data VARCHAR(500), created_date date) CLUSTER BY (category,subcategory) COMMENT = 'Table with clustering keys'
COMMENT ON TABLE LTHDB.TESTHARNESS.TEST_CLUSTERED_TABLE IS 'CLUSTER_BY:category,subcategory|COMMENT:Table with clustering keys'
CREATE TABLE LTHDB.TESTHARNESS.TEST_RETENTION_TABLE (id INT, data VARCHAR(200), timestamp timestamp DEFAULT current_timestamp::timestamp_ntz) DATA_RETENTION_TIME_IN_DAYS = 7 COMMENT = 'Table with data retention'
COMMENT ON TABLE LTHDB.TESTHARNESS.TEST_RETENTION_TABLE IS 'DATA_RETENTION:7|COMMENT:Table with data retention'
CREATE TABLE TEST_CHANGE_TRACKING_TABLE (
id INTEGER PRIMARY KEY,
data VARCHAR(200),
updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) CHANGE_TRACKING = TRUE
COMMENT = 'Table with change tracking'
CREATE TRANSIENT TABLE LTHDB.TESTHARNESS.TEST_FULL_FEATURE_TABLE (id INT NOT NULL, category VARCHAR(50), data VARCHAR(500), created_date timestamp DEFAULT current_timestamp::timestamp_ntz, CONSTRAINT PK_TEST_FULL_FEATURE_TABLE PRIMARY KEY (id)) CLUSTER BY (category) CHANGE_TRACKING = TRUE COMMENT = 'Full featured Snowflake table'
COMMENT ON TABLE LTHDB.TESTHARNESS.TEST_FULL_FEATURE_TABLE IS 'CLUSTER_BY:category|DATA_RETENTION:1|CHANGE_TRACKING:true|COMMENT:Full featured Snowflake table'
CREATE TABLE TEST_COMPLEX_TYPES_TABLE (
id INTEGER PRIMARY KEY,
json_data VARIANT,
array_data ARRAY,
object_data OBJECT,
geography_data GEOGRAPHY,
binary_data BINARY(100),
timestamp_ntz TIMESTAMP_NTZ,
timestamp_ltz TIMESTAMP_LTZ,
timestamp_tz TIMESTAMP_TZ
) COMMENT = 'Table with Snowflake complex data types'
ALTER TABLE TEST_RETENTION_TABLE CLUSTER BY (id)
ALTER TABLE TEST_CLUSTERED_TABLE SET DATA_RETENTION_TIME_IN_DAYS = 30
ALTER TABLE TEST_RETENTION_TABLE SET CHANGE_TRACKING = TRUE
DROP TABLE LTHDB.TESTHARNESS.TEST_TRANSIENT_TABLE
DROP TABLE LTHDB.TESTHARNESS.TEST_CLUSTERED_TABLE
DROP TABLE LTHDB.TESTHARNESS.TEST_RETENTION_TABLE
DROP TABLE LTHDB.TESTHARNESS.TEST_CHANGE_TRACKING_TABLE
DROP TABLE LTHDB.TESTHARNESS.TEST_FULL_FEATURE_TABLE
DROP TABLE LTHDB.TESTHARNESS.TEST_COMPLEX_TYPES_TABLE