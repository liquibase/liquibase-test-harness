-- Snowflake Test Harness Environment Setup Script
-- This script creates the standard test environment expected by the Liquibase Test Harness
-- 
-- Run this script as ACCOUNTADMIN or a role with CREATE DATABASE privileges
-- This runs ONCE when the test suite starts (not per test)
-- =============================================================================

-- Create the standard test database expected by test harness
CREATE DATABASE IF NOT EXISTS LTHDB
    COMMENT = 'Liquibase Test Harness Database';

-- Use the database
USE DATABASE LTHDB;

-- Create a specific role for test harness operations (required for object ownership)
CREATE ROLE IF NOT EXISTS LIQUIBASE_TEST_HARNESS_ROLE
    COMMENT = 'Role for Liquibase Test Harness operations';

-- Create a specific schema for test harness with a clear, descriptive name
CREATE SCHEMA IF NOT EXISTS TESTHARNESS
    DATA_RETENTION_TIME_IN_DAYS = 1
    COMMENT = 'Liquibase Test Harness Schema';

-- Grant all privileges on the schema to the role
GRANT ALL PRIVILEGES ON SCHEMA TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

USE SCHEMA TESTHARNESS;

-- Grant the role to the current user
GRANT ROLE LIQUIBASE_TEST_HARNESS_ROLE TO USER COMMUNITYKEVIN;

-- Grant basic access to current user
GRANT USAGE ON DATABASE LTHDB TO USER COMMUNITYKEVIN;
GRANT USAGE ON SCHEMA LTHDB.TESTHARNESS TO USER COMMUNITYKEVIN;

-- Grant permissions to the role (object creation must be done through roles, not directly to users)
GRANT USAGE ON DATABASE LTHDB TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE TABLE ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE VIEW ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE SEQUENCE ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE PROCEDURE ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE FUNCTION ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL VIEWS IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL PROCEDURES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Grant future object permissions to the role
GRANT ALL PRIVILEGES ON FUTURE TABLES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON FUTURE VIEWS IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON FUTURE SEQUENCES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON FUTURE PROCEDURES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON FUTURE FUNCTIONS IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Note: Account-level permissions removed - requires ACCOUNTADMIN privileges

-- Create a warehouse specifically for test harness to avoid conflicts
CREATE WAREHOUSE IF NOT EXISTS LTHDB_TEST_WH
    WAREHOUSE_SIZE = 'XSMALL'
    AUTO_SUSPEND = 60
    AUTO_RESUME = TRUE
    COMMENT = 'Dedicated warehouse for Liquibase Test Harness';

GRANT USAGE ON WAREHOUSE LTHDB_TEST_WH TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Note: XSMALL_WH warehouse creation removed - requires ACCOUNTADMIN privileges

-- Switch to the test harness role for subsequent operations
USE ROLE LIQUIBASE_TEST_HARNESS_ROLE;
USE WAREHOUSE LTHDB_TEST_WH;

-- Create Liquibase tracking tables
CREATE TABLE IF NOT EXISTS DATABASECHANGELOG (
    ID VARCHAR(255) NOT NULL,
    AUTHOR VARCHAR(255) NOT NULL,
    FILENAME VARCHAR(255) NOT NULL,
    DATEEXECUTED TIMESTAMP NOT NULL,
    ORDEREXECUTED INT NOT NULL,
    EXECTYPE VARCHAR(10) NOT NULL,
    MD5SUM VARCHAR(35),
    DESCRIPTION VARCHAR(255),
    COMMENTS VARCHAR(255),
    TAG VARCHAR(255),
    LIQUIBASE VARCHAR(20),
    CONTEXTS VARCHAR(255),
    LABELS VARCHAR(255),
    DEPLOYMENT_ID VARCHAR(10)
);

CREATE TABLE IF NOT EXISTS DATABASECHANGELOGLOCK (
    ID INT NOT NULL,
    LOCKED BOOLEAN NOT NULL,
    LOCKGRANTED TIMESTAMP,
    LOCKEDBY VARCHAR(255),
    PRIMARY KEY (ID)
);

-- Initialize the lock table
MERGE INTO DATABASECHANGELOGLOCK AS target
USING (SELECT 1 AS ID) AS source
ON target.ID = source.ID
WHEN NOT MATCHED THEN
    INSERT (ID, LOCKED) VALUES (1, FALSE)
WHEN MATCHED THEN
    UPDATE SET LOCKED = FALSE;

-- Clean any stale entries from previous runs
DELETE FROM DATABASECHANGELOG WHERE FILENAME NOT LIKE '%init.xml';

-- Ensure the lock is released
UPDATE DATABASECHANGELOGLOCK SET LOCKED = FALSE WHERE ID = 1;

-- Schema isolation uses timestamp-based unique names, no coordination table needed