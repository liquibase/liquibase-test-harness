-- Snowflake Test Harness Robust Init Script
-- This script can be run multiple times safely and handles both new and existing environments
-- It creates all necessary objects if they don't exist
-- =============================================================================

-- Switch to a role with sufficient privileges
USE ROLE ACCOUNTADMIN;  -- or another role that owns LTHDB

-- Create the test database if it doesn't exist
CREATE DATABASE IF NOT EXISTS LTHDB
    COMMENT = 'Liquibase Test Harness Database';

-- Use the database
USE DATABASE LTHDB;

-- Create the role first (if it doesn't exist)
CREATE ROLE IF NOT EXISTS LIQUIBASE_TEST_HARNESS_ROLE
    COMMENT = 'Role for Liquibase Test Harness operations';

-- Create the schema if it doesn't exist
CREATE SCHEMA IF NOT EXISTS TESTHARNESS
    DATA_RETENTION_TIME_IN_DAYS = 1
    COMMENT = 'Liquibase Test Harness Schema';

-- Grant database usage to the role
GRANT USAGE ON DATABASE LTHDB TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Grant all privileges on the schema to the role
GRANT ALL PRIVILEGES ON SCHEMA TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Grant object creation privileges
GRANT CREATE TABLE ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE VIEW ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE SEQUENCE ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE PROCEDURE ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT CREATE FUNCTION ON SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Grant privileges on all existing objects
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL VIEWS IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL PROCEDURES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Grant privileges on future objects
GRANT ALL PRIVILEGES ON FUTURE TABLES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON FUTURE VIEWS IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON FUTURE SEQUENCES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON FUTURE PROCEDURES IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;
GRANT ALL PRIVILEGES ON FUTURE FUNCTIONS IN SCHEMA LTHDB.TESTHARNESS TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Grant the role to the current user (COMMUNITYKEVIN)
GRANT ROLE LIQUIBASE_TEST_HARNESS_ROLE TO USER COMMUNITYKEVIN;

-- Grant basic access to the user
GRANT USAGE ON DATABASE LTHDB TO USER COMMUNITYKEVIN;
GRANT USAGE ON SCHEMA LTHDB.TESTHARNESS TO USER COMMUNITYKEVIN;

-- Create the warehouse if it doesn't exist
CREATE WAREHOUSE IF NOT EXISTS LTHDB_TEST_WH
    WAREHOUSE_SIZE = 'XSMALL'
    AUTO_SUSPEND = 60
    AUTO_RESUME = TRUE
    COMMENT = 'Dedicated warehouse for Liquibase Test Harness';

-- Grant warehouse usage to the role
GRANT USAGE ON WAREHOUSE LTHDB_TEST_WH TO ROLE LIQUIBASE_TEST_HARNESS_ROLE;

-- Now switch to the role and schema for subsequent operations
USE ROLE LIQUIBASE_TEST_HARNESS_ROLE;
USE WAREHOUSE LTHDB_TEST_WH;
USE SCHEMA TESTHARNESS;

-- Create Liquibase tracking tables if they don't exist
DROP TABLE IF EXISTS DATABASECHANGELOG;
CREATE TABLE IF NOT EXISTS DATABASECHANGELOG (
    ID VARCHAR(255) NOT NULL,
    AUTHOR VARCHAR(255) NOT NULL,
    FILENAME VARCHAR(255) NOT NULL,
    DATEEXECUTED TIMESTAMP NOT NULL,
    ORDEREXECUTED INT NOT NULL,
    EXECTYPE VARCHAR(10) NOT NULL,
    MD5SUM VARCHAR(35),
    DESCRIPTION VARCHAR(255),
    COMMENTS VARCHAR(255),
    TAG VARCHAR(255),
    LIQUIBASE VARCHAR(20),
    CONTEXTS VARCHAR(255),
    LABELS VARCHAR(255),
    DEPLOYMENT_ID VARCHAR(10)
);

DROP TABLE IF EXISTS DATABASECHANGELOGLOCK;
CREATE TABLE IF NOT EXISTS DATABASECHANGELOGLOCK (
    ID INT NOT NULL,
    LOCKED BOOLEAN NOT NULL,
    LOCKGRANTED TIMESTAMP,
    LOCKEDBY VARCHAR(255),
    PRIMARY KEY (ID)
);

-- Then insert a fresh unlocked record
INSERT INTO DATABASECHANGELOGLOCK (ID, LOCKED) VALUES (1, FALSE);


-- Confirm setup
SELECT 'Test harness environment ready' AS STATUS;