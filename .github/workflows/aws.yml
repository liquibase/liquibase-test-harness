# Basic workflow with Actions

name: AWS Cloud Database Test Execution
on:
  # Triggers the workflow on push & pull request events for the main branch. Also allows for manual triggers
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  # schedule:
  #   - cron: '0 12 * * *' # Execute every day at noon
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: "1.8.0"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        working-directory: src/test/resources/terraform
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: src/test/resources/terraform
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: src/test/resources/terraform
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: src/test/resources/terraform
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        working-directory: src/test/resources/terraform
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: src/test/resources/terraform
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Set Database Host URL
        working-directory: src/test/resources/terraform
        id: get-json
        run: |
          TFJSON=$(terraform output -json)
          echo "${{ fromJson($TFJSON).dbHost.value }}"

      - name: Create Database Objects
        working-directory: src/test/resources/terraform
        run: PGPASSWORD=LbRootPass1 psql -v ON_ERROR_STOP=1 --username lbuser --dbname lbcat -h $DBHOST -f postgres-init.sql

  test:
    runs-on: ubuntu-18.04
    needs: [setup]
    steps:
      - uses: actions/checkout@v2

      - name: Update Harness Config
        working-directory: src/test/resources
        run: sed -i "s/DBHOST/$DBHOST/g" harness-config.yml

      - name: AWS RDS Postgres Test Run
        run: mvn -Dtest=LiquibaseHarnessSuiteTest -DdbName=aws-postgresql -Dmaven.test.failure.ignore=true test

      - name: Archive AWS RDS Postgres Test Results
        uses: actions/upload-artifact@v2
        with:
          name: aws-rds-postgres-test-results
          path: build/spock-reports
  # destroy:
  #   runs-on: ubuntu-18.04
  #   needs: [setup,test]
  #   if: ${{ always() }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         # terraform_version: 0.13.0:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  #     - name: Terraform Init
  #       working-directory: src/test/resources/terraform
  #       id: init
  #       run: terraform init
  #     - name: Terraform Destroy
  #       working-directory: src/test/resources/terraform
  #       run: terraform destroy -auto-approve
