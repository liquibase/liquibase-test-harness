
name: Azure Cloud Sql DB Test
on:
  # Triggers the workflow on a schedule for the main branch. Also allows for manual triggers
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

jobs:
  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/test/resources/azure

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6.1.1
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve

  test:
    runs-on: ubuntu-latest
    needs: [setup]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: src/test/resources/azure
        run: terraform init

      - name: Fetch Connect Details from Terraform
        working-directory: src/test/resources/azure
        run: |
          echo "DBENDPOINT=$(terraform output -json azureSqlDbEndpoint | jq -r)" >> $GITHUB_ENV
          echo "ADMINUSER=$(terraform output -json admin_user | jq -r)" >> $GITHUB_ENV
          echo "ADMINPASSWD=$(terraform output -json admin_password | jq -r)" >> $GITHUB_ENV
 
      - name: Run Liquibase
        uses: liquibase/liquibase-github-action@v7
        with:
          operation: "update"
          classpath: "src/test/resources/azure"
          changeLogFile: "azuresql-init.sql"
          username: ${{ env.ADMINUSER }}
          password: ${{ env.ADMINPASSWD }}
          url: ${{ env.DBENDPOINT }}

      - name: Cache Local Maven Repo
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Azure SQL DB Test Run
        env:
          LIQUIBASE_PRO_LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
        run: mvn -Dtest=LiquibaseHarnessSuiteTest -DconfigFile=/harness-config-azuresqldb.yml -DdbUsername=${{env.ADMINUSER}} -DdbPassword=${{env.ADMINPASSWD}} -DdbUrl='${{env.DBENDPOINT}}' -Dmaven.test.failure.ignore=true test

      - name: Archive Azure Sql Database Test Results
        uses: actions/upload-artifact@v3
        with:
          name: azure-sqldb-test-results
          path: build/spock-reports

  destroy:
    runs-on: ubuntu-latest
    needs: [setup,test]
    defaults:
      run:
        working-directory: src/test/resources/azure
    if: ${{ always() }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
