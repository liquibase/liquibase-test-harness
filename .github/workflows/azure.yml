
name: Azure Cloud Sql DB Test
concurrency: azure-run
on:
  # Triggers the workflow on a schedule for the main branch. Also allows for manual triggers
  schedule:
    - cron: '30 8 * * *'
  workflow_dispatch:
    inputs:
      testClasses:
        type: choice
        description: Test Suite or test class to run
        options:
          - LiquibaseHarnessSuiteTest
          - FoundationalHarnessSuiteTest
          - AdvancedHarnessSuiteTest
          - ChangeObjectTests
          - ChangeDataTests
          - SnapshotObjectTests
          - GenerateChangelogTest
          - FoundationalTest
      testMode:
        description: >-
          Select test mode:
          'secure' – run Secure tests only.
          'community' – run Community tests only.
          'all' – run all tests (Community + Secure).
        required: true
        default: 'secure'
      databases:
        description: Databases to start up. Comma separated list of "name:version"
        required: true
        default: "[\"mysql:azure\", \"mssql:azure\", \"mssql:mi\", \"postgresql:flexible\"]"

permissions:
  contents: write
  id-token: write
  
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      databases: ${{ github.event.inputs.databases || '["mysql:azure","mssql:azure","mssql:mi","postgresql:flexible"]' }}
      testClasses: ${{ inputs.testClasses  || 'LiquibaseHarnessSuiteTest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

  init-mysql:
    runs-on: ubuntu-latest
    container:
      image: liquibase/liquibase:latest
      env:
        LIQUIBASE_PRO_LICENSE_KEY: ${{ env.PRO_LICENSE_KEY }}
        TEST_MODE: ${{ github.event.inputs.testMode }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - database: mysql
            version: azure
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      #      This additional init step is required because of mysql driver issue on GH actions
      - name: Install Dependencies
        run: lpm update && lpm add mysql

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true
          
      - name: Clean Azure MySQL Database
        uses: liquibase-github-actions/drop-all@v4.33.0
        if: ${{ matrix.database == 'mysql' }}
        with:
          url: "${{env.TH_AZURE_MYSQL_URL}}"
          username: "${{ format('{0}@{1}', env.TH_DB_ADMIN, env.TH_AZURE_MYSQL_FQDN) }}"
          password: "${{env.TH_DB_PASSWD}}"
          licenseKey: "${{env.PRO_LICENSE_KEY}}"
          force: true
          requireForce: true

      - name: Init Azure MySQL Database
        uses: liquibase/liquibase-github-action@v7
        if: ${{ matrix.database == 'mysql' }}
        with:
          operation: "update"
          classpath: "src/test/resources/init-changelogs/azure"
          changeLogFile: "mysql.sql"
          username: "${{ format('{0}@{1}', env.TH_DB_ADMIN, env.TH_AZURE_MYSQL_FQDN) }}"
          password: "${{env.TH_DB_PASSWD}}"
          url: "${{env.TH_AZURE_MYSQL_URL}}"
  test:
    needs: [init-mysql, setup]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        database: ${{ fromJson(needs.setup.outputs.databases) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true
          
      - name: Configure Test
        id: setup
        uses: actions/github-script@v8
        with:
          script: |
            let splitValues = "${{ matrix.database }}".split(":")
            core.setOutput("databasePlatform", splitValues[0]);
            core.setOutput("databaseVersion", splitValues[1]);

      - name: Azure MSSQL dropAll
        uses: liquibase-github-actions/drop-all@v4.33.0
        if: ${{ steps.setup.outputs.databasePlatform == 'mssql' && steps.setup.outputs.databaseVersion == 'azure' }}
        with:
          url: "${{env.TH_AZURE_URL}}"
          username: "${{env.TH_DB_ADMIN}}"
          password: "${{env.TH_DB_PASSWD}}"
          licenseKey: "${{env.PRO_LICENSE_KEY}}"
          force: true
          requireForce: true

      - name: Azure MSSQL init changelogs update
        uses: liquibase/liquibase-github-action@v7
        if: ${{ steps.setup.outputs.databasePlatform == 'mssql' && steps.setup.outputs.databaseVersion == 'azure' }}
        with:
          operation: "update"
          classpath: "src/test/resources/init-changelogs/azure"
          changeLogFile: "sqlserver.sql"
          username: "${{env.TH_DB_ADMIN}}"
          password: "${{env.TH_DB_PASSWD}}"
          url: "${{env.TH_AZURE_URL}}"

      - name: Azure MSSQL MI dropAll
        uses: liquibase-github-actions/drop-all@v4.33.0
        if: ${{ steps.setup.outputs.databasePlatform == 'mssql' && steps.setup.outputs.databaseVersion == 'mi' }}
        with:
          url: "${{env.TH_AZURE_MSSQL_MI_URL}}"
          username: "${{env.TH_DB_ADMIN}}"
          password: "${{env.TH_DB_PASSWD}}"
          licenseKey: "${{env.PRO_LICENSE_KEY}}"
          force: true
          requireForce: true

      - name: Azure MSSQL MI init changelogs update
        uses: liquibase/liquibase-github-action@v7
        if: ${{ steps.setup.outputs.databasePlatform == 'mssql' && steps.setup.outputs.databaseVersion == 'mi' }}
        with:
          operation: "update"
          classpath: "src/test/resources/init-changelogs/azure"
          changeLogFile: "sqlserver.sql"
          username: "${{env.TH_DB_ADMIN}}"
          password: "${{env.TH_DB_PASSWD}}"
          url: "${{env.TH_AZURE_MSSQL_MI_URL}}"

      - name: Azure ${{ steps.setup.outputs.databasePlatform }}-${{ steps.setup.outputs.databaseVersion }} Test Run
        if: ${{ steps.setup.outputs.databasePlatform == 'mysql' }}
        env:
          LIQUIBASE_PRO_LICENSE_KEY: ${{ env.PRO_LICENSE_KEY }}
          TEST_MODE: ${{ github.event.inputs.testMode }}
        run: mvn -Dtest=${{ needs.setup.outputs.testClasses }} -DconfigFile=/harness-config-cloud.yml -DdbName=${{ steps.setup.outputs.databasePlatform }} -Dprefix=azure -DdbVersion=${{ steps.setup.outputs.databaseVersion }} -DdbUsername=${{ format('{0}@{1}', env.TH_DB_ADMIN, env.TH_AZURE_MYSQL_FQDN) }} -DdbPassword=${{env.TH_DB_PASSWD}} -DdbUrl='${{env.TH_AZURE_MYSQL_URL}}' test

      - name: Azure ${{ steps.setup.outputs.databasePlatform }}-${{ steps.setup.outputs.databaseVersion }} Test Run
        if: ${{ steps.setup.outputs.databasePlatform == 'mssql' && steps.setup.outputs.databaseVersion == 'azure' }}
        env:
          LIQUIBASE_PRO_LICENSE_KEY: ${{ env.PRO_LICENSE_KEY }}
          TEST_MODE: ${{ github.event.inputs.testMode }}
        run: mvn -Dtest=${{ needs.setup.outputs.testClasses }} -DconfigFile=/harness-config-cloud.yml -DdbName=${{ steps.setup.outputs.databasePlatform }} -Dprefix=azure -DdbUsername=${{env.TH_DB_ADMIN}} -DdbPassword=${{env.TH_DB_PASSWD}} -DdbUrl='${{env.TH_AZURE_URL}}' test

      - name: Azure ${{ steps.setup.outputs.databasePlatform }}-${{ steps.setup.outputs.databaseVersion }} Test Run
        if: ${{ steps.setup.outputs.databasePlatform == 'mssql' && steps.setup.outputs.databaseVersion == 'mi' }}
        env:
          LIQUIBASE_PRO_LICENSE_KEY: ${{ env.PRO_LICENSE_KEY }}
          TEST_MODE: ${{ github.event.inputs.testMode }}
        run: mvn -Dtest=${{ needs.setup.outputs.testClasses }} -DconfigFile=/harness-config-cloud.yml -DdbName=${{ steps.setup.outputs.databasePlatform }} -Dprefix=azure -DdbVersion=mi -DdbUsername=${{env.TH_DB_ADMIN}} -DdbPassword=${{env.TH_DB_PASSWD}} -DdbUrl='${{env.TH_AZURE_MSSQL_MI_URL}}' test

      - name: Archive Azure ${{ steps.setup.outputs.databasePlatform }}-${{ steps.setup.outputs.databaseVersion }} Test Results
        uses: actions/upload-artifact@v4
        with:
          name: azure-${{ steps.setup.outputs.databasePlatform }}-${{ steps.setup.outputs.databaseVersion }}-test-results
          path: build/spock-reports

  postgresql-flexible-test:
    name: PostgreSQL Flexible Server Test
    needs: setup
    if: "contains(needs.setup.outputs.databases, 'postgresql:flexible')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [15, 16]

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true
          
      - name: Azure PostgreSQL Flexible Server dropAll
        uses: liquibase-github-actions/drop-all@v4.33.0
        with:
          url: ${{ env[format('TH_AZURE_POSTGRESQL_FLEXIBLE_SERVER_{0}_URL', matrix.version)] }}
          username: "${{env.TH_DB_ADMIN}}"
          password: "${{env.TH_DB_PASSWD}}"
          licenseKey: "${{env.PRO_LICENSE_KEY}}"
          force: true
          requireForce: true

      - name: Azure PostgreSQL Flexible Server init changelogs update
        uses: liquibase/liquibase-github-action@v7
        with:
          operation: "update"
          classpath: "src/test/resources/init-changelogs/azure"
          changeLogFile: "postgresql.sql"
          username: "${{env.TH_DB_ADMIN}}"
          password: "${{env.TH_DB_PASSWD}}"
          url: ${{ env[format('TH_AZURE_POSTGRESQL_FLEXIBLE_SERVER_{0}_URL', matrix.version)] }}

      - name: Azure ${{ steps.setup.outputs.databasePlatform }}-${{ steps.setup.outputs.databaseVersion }} Test Run
        env:
          LIQUIBASE_PRO_LICENSE_KEY: ${{ env.PRO_LICENSE_KEY }}
          TEST_MODE: ${{ github.event.inputs.testMode }}
        run: mvn -Dtest=${{ needs.setup.outputs.testClasses }} -DconfigFile=/harness-config-cloud.yml -DdbName=${{ steps.setup.outputs.databasePlatform }} -Dprefix=azure -DdbVersion=flexible_${{ matrix.version }} -DdbUsername=${{env.TH_DB_ADMIN}} -DdbPassword=${{env.TH_DB_PASSWD}} -DdbUrl='${{ env[format('TH_AZURE_POSTGRESQL_FLEXIBLE_SERVER_{0}_URL', matrix.version)] }}' test

      - name: Archive Azure ${{ steps.setup.outputs.databasePlatform }}-${{ steps.setup.outputs.databaseVersion }} Test Results
        uses: actions/upload-artifact@v4
        with:
          name: azure-${{ steps.setup.outputs.databasePlatform }}-${{ steps.setup.outputs.databaseVersion }}-flexible-${{ matrix.version }}-test-results
          path: build/spock-reports