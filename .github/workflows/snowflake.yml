
name: Snowflake Cloud Database Test Execution
on:
  # Triggers the workflow on a schedule for the main branch. Also allows for manual triggers
  # schedule:
  #   - cron: '0 12 * * *' # Execute every day at noon
  workflow_dispatch:

jobs:
  # setup:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: src/test/resources/snowflake
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform Format
  #       id: fmt
  #       run: terraform fmt

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Plan
  #       id: plan
  #       if: github.event_name == 'pull_request'
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     - uses: actions/github-script@0.9.0
  #       if: github.event_name == 'pull_request'
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

  #           <details><summary>Show Plan</summary>

  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           \`\`\`

  #           </details>

  #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

  #           github.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })

  #     - name: Terraform Plan Status
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve

  test:
    runs-on: ubuntu-latest
    # needs: [setup]
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     include:
    #       - database: postgresql
    #         version: 9-6
    #       - database: postgresql
    #         version: 10
    #       - database: postgresql
    #         version: 11
    #       - database: postgresql
    #         version: 12
    #       - database: postgresql
    #         version: 13         
    #       - database: oracle
    #         version: 12-1
    #       - database: oracle
    #         version: 19

    steps:
      - uses: actions/checkout@v3
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      #     terraform_wrapper: false
          
      # - name: Terraform Init
      #   working-directory: src/test/resources/terraform
      #   run: terraform init

      # - name: Get ${{ matrix.database }}-${{ matrix.version }} Database Host URL
      #   working-directory: src/test/resources/terraform
      #   run: |
      #     echo "DBENDPOINT=$(terraform output -json ${{ matrix.database }}Endpoint | jq -r '."${{ matrix.database }}-${{ matrix.version }}"')" >> $GITHUB_ENV

      - uses: liquibase/liquibase-github-action@v5
        with:
          operation: "update"
          classpath: "src/test/resources/snowflake"
          changeLogFile: "snowflake-init.sql"
          username: ${{ secrets.SNOWFLAKE_TH_USER }}
          password: ${{ secrets.SNOWFLAKE_TH_PASS }}
          url: "${{ secrets.SNOWFLAKE_JDBC_URL }}/?db=TEST_HARNESS&schema=PUBLIC"

      # - name: Update ${{ matrix.database }}-${{ matrix.version }} Harness Config
      #   working-directory: src/test/resources
      #   run: |
      #     sed -i "s/DBENDPOINT/${{ env.DBENDPOINT }}/g" harness-config.yml
      #     sed -i "s/DBVERSION/${{ matrix.version }}/g" harness-config.yml

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Snowflake Test Run
        env:
          LIQUIBASE_PRO_LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
        run: mvn -Dtest=LiquibaseHarnessSuiteTest -Dprefix=cloud -DdbName=snowflake -Durl="${{ secrets.SNOWFLAKE_JDBC_URL }}/?db=TEST_HARNESS&schema=PUBLIC" -Dusername=${{ secrets.SNOWFLAKE_TH_USER }} -Dpassword=${{ secrets.SNOWFLAKE_TH_PASS }} -DrollbackStrategy=rollbackByTag test

      - name: Archive Snowflake Database Test Results
        uses: actions/upload-artifact@v3
        with:
          name: snowflake-test-results
          path: build/spock-reports

  # destroy:
  #   runs-on: ubuntu-latest
  #   needs: [setup,test]
  #   defaults:
  #     run:
  #       working-directory: src/test/resources/terraform
  #   if: ${{ always() }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  #     - name: Terraform Init
  #       run: terraform init
  #     - name: Terraform Destroy
  #       run: terraform destroy -auto-approve
